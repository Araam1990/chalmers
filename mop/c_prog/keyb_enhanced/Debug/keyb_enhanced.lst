
Debug/keyb_enhanced:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f8f4 	bl	200001f0 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
#define GPIO_PUPDR      ((volatile unsigned int *)      (GPIO_D+0xC))
#define GPIO_IDR_LOW    ((volatile unsigned char *)     (GPIO_D+0x10))
#define GPIO_IDR_HIGH   ((volatile unsigned char *)     (GPIO_D+0x11))
#define GPIO_ODR_LOW    ((volatile unsigned char *)     (GPIO_D+0x14))
#define GPIO_ODR_HIGH   ((volatile unsigned char *)     (GPIO_D+0x15))
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <app_init>:

unsigned char wait = 0;

void app_init(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    // GPIO_MODER, set outport and inports
    *GPIO_MODER = 0x55005555;
20000014:	4b09      	ldr	r3, [pc, #36]	; (2000003c <app_init+0x2c>)
20000016:	4a0a      	ldr	r2, [pc, #40]	; (20000040 <app_init+0x30>)
20000018:	601a      	str	r2, [r3, #0]
    
    // GPIO_PUPDR, pull-up/pull-down register
    *GPIO_PUPDR &= 0x0000FFFF;
2000001a:	4b0a      	ldr	r3, [pc, #40]	; (20000044 <app_init+0x34>)
2000001c:	681a      	ldr	r2, [r3, #0]
2000001e:	4b09      	ldr	r3, [pc, #36]	; (20000044 <app_init+0x34>)
20000020:	0412      	lsls	r2, r2, #16
20000022:	0c12      	lsrs	r2, r2, #16
20000024:	601a      	str	r2, [r3, #0]
    *GPIO_PUPDR |= 0x00AA0000;
20000026:	4b07      	ldr	r3, [pc, #28]	; (20000044 <app_init+0x34>)
20000028:	681a      	ldr	r2, [r3, #0]
2000002a:	4b06      	ldr	r3, [pc, #24]	; (20000044 <app_init+0x34>)
2000002c:	21aa      	movs	r1, #170	; 0xaa
2000002e:	0409      	lsls	r1, r1, #16
20000030:	430a      	orrs	r2, r1
20000032:	601a      	str	r2, [r3, #0]
}
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	46bd      	mov	sp, r7
20000038:	bd80      	pop	{r7, pc}
2000003a:	46c0      	nop			; (mov r8, r8)
2000003c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000040:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000044:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000048 <activate_row>:


void activate_row(row)
{
20000048:	b580      	push	{r7, lr}
2000004a:	b082      	sub	sp, #8
2000004c:	af00      	add	r7, sp, #0
2000004e:	6078      	str	r0, [r7, #4]
20000050:	687b      	ldr	r3, [r7, #4]
20000052:	2b05      	cmp	r3, #5
20000054:	d819      	bhi.n	2000008a <activate_row+0x42>
20000056:	687b      	ldr	r3, [r7, #4]
20000058:	009a      	lsls	r2, r3, #2
2000005a:	4b10      	ldr	r3, [pc, #64]	; (2000009c <activate_row+0x54>)
2000005c:	18d3      	adds	r3, r2, r3
2000005e:	681b      	ldr	r3, [r3, #0]
20000060:	469f      	mov	pc, r3
    switch(row)
    {
        case 1: 
            *GPIO_ODR_HIGH = 0x10; 
20000062:	4b0f      	ldr	r3, [pc, #60]	; (200000a0 <activate_row+0x58>)
20000064:	2210      	movs	r2, #16
20000066:	701a      	strb	r2, [r3, #0]
            break;
20000068:	e013      	b.n	20000092 <activate_row+0x4a>
        case 2: 
            *GPIO_ODR_HIGH = 0x20; 
2000006a:	4b0d      	ldr	r3, [pc, #52]	; (200000a0 <activate_row+0x58>)
2000006c:	2220      	movs	r2, #32
2000006e:	701a      	strb	r2, [r3, #0]
            break;
20000070:	e00f      	b.n	20000092 <activate_row+0x4a>
        case 3: 
            *GPIO_ODR_HIGH = 0x40; 
20000072:	4b0b      	ldr	r3, [pc, #44]	; (200000a0 <activate_row+0x58>)
20000074:	2240      	movs	r2, #64	; 0x40
20000076:	701a      	strb	r2, [r3, #0]
            break;
20000078:	e00b      	b.n	20000092 <activate_row+0x4a>
        case 4: 
            *GPIO_ODR_HIGH = 0x80; 
2000007a:	4b09      	ldr	r3, [pc, #36]	; (200000a0 <activate_row+0x58>)
2000007c:	2280      	movs	r2, #128	; 0x80
2000007e:	701a      	strb	r2, [r3, #0]
            break;
20000080:	e007      	b.n	20000092 <activate_row+0x4a>
        case 5: 
            *GPIO_ODR_HIGH = 0xF0; 
20000082:	4b07      	ldr	r3, [pc, #28]	; (200000a0 <activate_row+0x58>)
20000084:	22f0      	movs	r2, #240	; 0xf0
20000086:	701a      	strb	r2, [r3, #0]
            break;
20000088:	e003      	b.n	20000092 <activate_row+0x4a>
        default:  
            *GPIO_ODR_HIGH = 0x00; 
2000008a:	4b05      	ldr	r3, [pc, #20]	; (200000a0 <activate_row+0x58>)
2000008c:	2200      	movs	r2, #0
2000008e:	701a      	strb	r2, [r3, #0]
            break;
20000090:	46c0      	nop			; (mov r8, r8)
    }
}
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	46bd      	mov	sp, r7
20000096:	b002      	add	sp, #8
20000098:	bd80      	pop	{r7, pc}
2000009a:	46c0      	nop			; (mov r8, r8)
2000009c:	20000228 	andcs	r0, r0, r8, lsr #4
200000a0:	40020c15 	andmi	r0, r2, r5, lsl ip

200000a4 <keyb_alt_ctrl>:

unsigned short keyb_alt_ctrl(void)
{
200000a4:	b580      	push	{r7, lr}
200000a6:	b082      	sub	sp, #8
200000a8:	af00      	add	r7, sp, #0
    unsigned short bitmask = 0x0000;
200000aa:	1dbb      	adds	r3, r7, #6
200000ac:	2200      	movs	r2, #0
200000ae:	801a      	strh	r2, [r3, #0]
    for(int row = 1; row <= 4; row++){
200000b0:	2301      	movs	r3, #1
200000b2:	603b      	str	r3, [r7, #0]
200000b4:	e014      	b.n	200000e0 <keyb_alt_ctrl+0x3c>
        bitmask *= 0x10;
200000b6:	1dbb      	adds	r3, r7, #6
200000b8:	1dba      	adds	r2, r7, #6
200000ba:	8812      	ldrh	r2, [r2, #0]
200000bc:	0112      	lsls	r2, r2, #4
200000be:	801a      	strh	r2, [r3, #0]
        activate_row(row);
200000c0:	683b      	ldr	r3, [r7, #0]
200000c2:	0018      	movs	r0, r3
200000c4:	f7ff ffc0 	bl	20000048 <activate_row>
        bitmask += *GPIO_IDR_HIGH;
200000c8:	4b0a      	ldr	r3, [pc, #40]	; (200000f4 <keyb_alt_ctrl+0x50>)
200000ca:	781b      	ldrb	r3, [r3, #0]
200000cc:	b2db      	uxtb	r3, r3
200000ce:	b299      	uxth	r1, r3
200000d0:	1dbb      	adds	r3, r7, #6
200000d2:	1dba      	adds	r2, r7, #6
200000d4:	8812      	ldrh	r2, [r2, #0]
200000d6:	188a      	adds	r2, r1, r2
200000d8:	801a      	strh	r2, [r3, #0]
    for(int row = 1; row <= 4; row++){
200000da:	683b      	ldr	r3, [r7, #0]
200000dc:	3301      	adds	r3, #1
200000de:	603b      	str	r3, [r7, #0]
200000e0:	683b      	ldr	r3, [r7, #0]
200000e2:	2b04      	cmp	r3, #4
200000e4:	dde7      	ble.n	200000b6 <keyb_alt_ctrl+0x12>
    }
    return bitmask;
200000e6:	1dbb      	adds	r3, r7, #6
200000e8:	881b      	ldrh	r3, [r3, #0]
}
200000ea:	0018      	movs	r0, r3
200000ec:	46bd      	mov	sp, r7
200000ee:	b002      	add	sp, #8
200000f0:	bd80      	pop	{r7, pc}
200000f2:	46c0      	nop			; (mov r8, r8)
200000f4:	40020c11 	andmi	r0, r2, r1, lsl ip

200000f8 <is_numeric>:

unsigned char is_numeric(bitmask)
{
200000f8:	b590      	push	{r4, r7, lr}
200000fa:	b089      	sub	sp, #36	; 0x24
200000fc:	af00      	add	r7, sp, #0
200000fe:	6078      	str	r0, [r7, #4]
    unsigned char keys[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
20000100:	230c      	movs	r3, #12
20000102:	18fb      	adds	r3, r7, r3
20000104:	4a2a      	ldr	r2, [pc, #168]	; (200001b0 <is_numeric+0xb8>)
20000106:	ca13      	ldmia	r2!, {r0, r1, r4}
20000108:	c313      	stmia	r3!, {r0, r1, r4}
2000010a:	6812      	ldr	r2, [r2, #0]
2000010c:	601a      	str	r2, [r3, #0]
    unsigned short numeric_bitmask = 0x7772;
2000010e:	211e      	movs	r1, #30
20000110:	187b      	adds	r3, r7, r1
20000112:	4a28      	ldr	r2, [pc, #160]	; (200001b4 <is_numeric+0xbc>)
20000114:	801a      	strh	r2, [r3, #0]
    if (!(bitmask & numeric_bitmask)){
20000116:	187b      	adds	r3, r7, r1
20000118:	881b      	ldrh	r3, [r3, #0]
2000011a:	687a      	ldr	r2, [r7, #4]
2000011c:	4013      	ands	r3, r2
2000011e:	d101      	bne.n	20000124 <is_numeric+0x2c>
        return 0xFF;
20000120:	23ff      	movs	r3, #255	; 0xff
20000122:	e041      	b.n	200001a8 <is_numeric+0xb0>
    }
    
    if (bitmask & 0x0002){
20000124:	687b      	ldr	r3, [r7, #4]
20000126:	2202      	movs	r2, #2
20000128:	4013      	ands	r3, r2
2000012a:	d001      	beq.n	20000130 <is_numeric+0x38>
        return 0x0;
2000012c:	2300      	movs	r3, #0
2000012e:	e03b      	b.n	200001a8 <is_numeric+0xb0>
    }
    else if (bitmask & 0x1000){
20000130:	687a      	ldr	r2, [r7, #4]
20000132:	2380      	movs	r3, #128	; 0x80
20000134:	015b      	lsls	r3, r3, #5
20000136:	4013      	ands	r3, r2
20000138:	d001      	beq.n	2000013e <is_numeric+0x46>
        return 0x1;
2000013a:	2301      	movs	r3, #1
2000013c:	e034      	b.n	200001a8 <is_numeric+0xb0>
    }
    else if (bitmask & 0x2000){
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	2380      	movs	r3, #128	; 0x80
20000142:	019b      	lsls	r3, r3, #6
20000144:	4013      	ands	r3, r2
20000146:	d001      	beq.n	2000014c <is_numeric+0x54>
        return 0x2;
20000148:	2302      	movs	r3, #2
2000014a:	e02d      	b.n	200001a8 <is_numeric+0xb0>
    }
    else if (bitmask & 0x4000){
2000014c:	687a      	ldr	r2, [r7, #4]
2000014e:	2380      	movs	r3, #128	; 0x80
20000150:	01db      	lsls	r3, r3, #7
20000152:	4013      	ands	r3, r2
20000154:	d001      	beq.n	2000015a <is_numeric+0x62>
        return 0x3;
20000156:	2303      	movs	r3, #3
20000158:	e026      	b.n	200001a8 <is_numeric+0xb0>
    }
    else if (bitmask & 0x0100){
2000015a:	687a      	ldr	r2, [r7, #4]
2000015c:	2380      	movs	r3, #128	; 0x80
2000015e:	005b      	lsls	r3, r3, #1
20000160:	4013      	ands	r3, r2
20000162:	d001      	beq.n	20000168 <is_numeric+0x70>
        return 0x4;
20000164:	2304      	movs	r3, #4
20000166:	e01f      	b.n	200001a8 <is_numeric+0xb0>
    }
    else if (bitmask & 0x0200){
20000168:	687a      	ldr	r2, [r7, #4]
2000016a:	2380      	movs	r3, #128	; 0x80
2000016c:	009b      	lsls	r3, r3, #2
2000016e:	4013      	ands	r3, r2
20000170:	d001      	beq.n	20000176 <is_numeric+0x7e>
        return 0x5;
20000172:	2305      	movs	r3, #5
20000174:	e018      	b.n	200001a8 <is_numeric+0xb0>
    }
    else if (bitmask & 0x0400){
20000176:	687a      	ldr	r2, [r7, #4]
20000178:	2380      	movs	r3, #128	; 0x80
2000017a:	00db      	lsls	r3, r3, #3
2000017c:	4013      	ands	r3, r2
2000017e:	d001      	beq.n	20000184 <is_numeric+0x8c>
        return 0x6;
20000180:	2306      	movs	r3, #6
20000182:	e011      	b.n	200001a8 <is_numeric+0xb0>
    }
    else if (bitmask & 0x0010){
20000184:	687b      	ldr	r3, [r7, #4]
20000186:	2210      	movs	r2, #16
20000188:	4013      	ands	r3, r2
2000018a:	d001      	beq.n	20000190 <is_numeric+0x98>
        return 0x7;
2000018c:	2307      	movs	r3, #7
2000018e:	e00b      	b.n	200001a8 <is_numeric+0xb0>
    }
    else if (bitmask & 0x0020){
20000190:	687b      	ldr	r3, [r7, #4]
20000192:	2220      	movs	r2, #32
20000194:	4013      	ands	r3, r2
20000196:	d001      	beq.n	2000019c <is_numeric+0xa4>
        return 0x8;
20000198:	2308      	movs	r3, #8
2000019a:	e005      	b.n	200001a8 <is_numeric+0xb0>
    }
    else if (bitmask & 0x0040){
2000019c:	687b      	ldr	r3, [r7, #4]
2000019e:	2240      	movs	r2, #64	; 0x40
200001a0:	4013      	ands	r3, r2
200001a2:	d001      	beq.n	200001a8 <is_numeric+0xb0>
        return 0x9;
200001a4:	2309      	movs	r3, #9
200001a6:	e7ff      	b.n	200001a8 <is_numeric+0xb0>
    }
}
200001a8:	0018      	movs	r0, r3
200001aa:	46bd      	mov	sp, r7
200001ac:	b009      	add	sp, #36	; 0x24
200001ae:	bd90      	pop	{r4, r7, pc}
200001b0:	20000240 	andcs	r0, r0, r0, asr #4
200001b4:	00007772 	andeq	r7, r0, r2, ror r7

200001b8 <out7seg>:

void out7seg(unsigned char c)
{
200001b8:	b5b0      	push	{r4, r5, r7, lr}
200001ba:	b086      	sub	sp, #24
200001bc:	af00      	add	r7, sp, #0
200001be:	0002      	movs	r2, r0
200001c0:	1dfb      	adds	r3, r7, #7
200001c2:	701a      	strb	r2, [r3, #0]
    unsigned char segcodes[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67,0x77,0x7A,0x39,0x5E,0x79,0x71};
200001c4:	2008      	movs	r0, #8
200001c6:	183b      	adds	r3, r7, r0
200001c8:	4a07      	ldr	r2, [pc, #28]	; (200001e8 <out7seg+0x30>)
200001ca:	ca32      	ldmia	r2!, {r1, r4, r5}
200001cc:	c332      	stmia	r3!, {r1, r4, r5}
200001ce:	6812      	ldr	r2, [r2, #0]
200001d0:	601a      	str	r2, [r3, #0]
    *GPIO_ODR_LOW = segcodes[c];
200001d2:	1dfb      	adds	r3, r7, #7
200001d4:	781b      	ldrb	r3, [r3, #0]
200001d6:	4905      	ldr	r1, [pc, #20]	; (200001ec <out7seg+0x34>)
200001d8:	183a      	adds	r2, r7, r0
200001da:	5cd3      	ldrb	r3, [r2, r3]
200001dc:	700b      	strb	r3, [r1, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b006      	add	sp, #24
200001e4:	bdb0      	pop	{r4, r5, r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	20000250 	andcs	r0, r0, r0, asr r2
200001ec:	40020c14 	andmi	r0, r2, r4, lsl ip

200001f0 <main>:

void main(void)
{
200001f0:	b590      	push	{r4, r7, lr}
200001f2:	b083      	sub	sp, #12
200001f4:	af00      	add	r7, sp, #0
    unsigned short keyb_status;
    unsigned char c;
    app_init();
200001f6:	f7ff ff0b 	bl	20000010 <app_init>
    
    while(1){
        keyb_status = keyb_alt_ctrl();
200001fa:	1dbc      	adds	r4, r7, #6
200001fc:	f7ff ff52 	bl	200000a4 <keyb_alt_ctrl>
20000200:	0003      	movs	r3, r0
20000202:	8023      	strh	r3, [r4, #0]
        c = is_numeric(keyb_status);
20000204:	1dbb      	adds	r3, r7, #6
20000206:	881b      	ldrh	r3, [r3, #0]
20000208:	1d7c      	adds	r4, r7, #5
2000020a:	0018      	movs	r0, r3
2000020c:	f7ff ff74 	bl	200000f8 <is_numeric>
20000210:	0003      	movs	r3, r0
20000212:	7023      	strb	r3, [r4, #0]
        if (c != 0xFF)
20000214:	1d7b      	adds	r3, r7, #5
20000216:	781b      	ldrb	r3, [r3, #0]
20000218:	2bff      	cmp	r3, #255	; 0xff
2000021a:	d0ee      	beq.n	200001fa <main+0xa>
            out7seg(c);
2000021c:	1d7b      	adds	r3, r7, #5
2000021e:	781b      	ldrb	r3, [r3, #0]
20000220:	0018      	movs	r0, r3
20000222:	f7ff ffc9 	bl	200001b8 <out7seg>
        keyb_status = keyb_alt_ctrl();
20000226:	e7e8      	b.n	200001fa <main+0xa>
20000228:	2000008a 	andcs	r0, r0, sl, lsl #1
2000022c:	20000062 	andcs	r0, r0, r2, rrx
20000230:	2000006a 	andcs	r0, r0, sl, rrx
20000234:	20000072 	andcs	r0, r0, r2, ror r0
20000238:	2000007a 	andcs	r0, r0, sl, ror r0
2000023c:	20000082 	andcs	r0, r0, r2, lsl #1
20000240:	0a030201 	beq	200c0a4c <wait+0xc07ec>
20000244:	0b060504 	bleq	2018165c <wait+0x1813fc>
20000248:	0c090807 	stceq	8, cr0, [r9], {7}
2000024c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 2000021c <main+0x2c>
20000250:	4f5b063f 	svcmi	0x005b063f
20000254:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20000258:	7a77677f 	bvc	21dda05c <wait+0x1dd9dfc>
2000025c:	71795e39 	cmnvc	r9, r9, lsr lr

20000260 <wait>:
20000260:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000019b 	muleq	r0, fp, r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	00009d0c 	andeq	r9, r0, ip, lsl #26
  14:	00014100 	andeq	r4, r1, r0, lsl #2
	...
  24:	007c0200 	rsbseq	r0, ip, r0, lsl #4
  28:	17010000 	strne	r0, [r1, -r0]
  2c:	0000370f 	andeq	r3, r0, pc, lsl #14
  30:	60030500 	andvs	r0, r3, r0, lsl #10
  34:	03200002 			; <UNDEFINED> instruction: 0x03200002
  38:	01200801 			; <UNDEFINED> instruction: 0x01200801
  3c:	3c040000 	stccc	0, cr0, [r4], {-0}
  40:	01000001 	tsteq	r0, r1
  44:	01f00676 	mvnseq	r0, r6, ror r6
  48:	00382000 	eorseq	r2, r8, r0
  4c:	9c010000 	stcls	0, cr0, [r1], {-0}
  50:	00000071 	andeq	r0, r0, r1, ror r0
  54:	0000f405 	andeq	pc, r0, r5, lsl #8
  58:	14780100 	ldrbtne	r0, [r8], #-256	; 0xffffff00
  5c:	00000071 	andeq	r0, r0, r1, ror r0
  60:	066e9102 	strbteq	r9, [lr], -r2, lsl #2
  64:	79010063 	stmdbvc	r1, {r0, r1, r5, r6}
  68:	00003713 	andeq	r3, r0, r3, lsl r7
  6c:	6d910200 	lfmvs	f0, 4, [r1]
  70:	07020300 	streq	r0, [r2, -r0, lsl #6]
  74:	00000081 	andeq	r0, r0, r1, lsl #1
  78:	0000ec07 	andeq	lr, r0, r7, lsl #24
  7c:	06700100 	ldrbteq	r0, [r0], -r0, lsl #2
  80:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
  84:	00000038 	andeq	r0, r0, r8, lsr r0
  88:	00ab9c01 	adceq	r9, fp, r1, lsl #24
  8c:	63080000 	movwvs	r0, #32768	; 0x8000
  90:	1c700100 	ldfnee	f0, [r0], #-0
  94:	00000037 	andeq	r0, r0, r7, lsr r0
  98:	055f9102 	ldrbeq	r9, [pc, #-258]	; ffffff9e <wait+0xdffffd3e>
  9c:	00000094 	muleq	r0, r4, r0
  a0:	ab137201 	blge	4dc8ac <startup-0x1fb23754>
  a4:	02000000 	andeq	r0, r0, #0, 0
  a8:	09006091 	stmdbeq	r0, {r0, r4, r7, sp, lr}
  ac:	00000037 	andeq	r0, r0, r7, lsr r0
  b0:	000000bb 	strheq	r0, [r0], -fp
  b4:	0000bb0a 	andeq	fp, r0, sl, lsl #22
  b8:	03000f00 	movweq	r0, #3840	; 0xf00
  bc:	00870704 	addeq	r0, r7, r4, lsl #14
  c0:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  c4:	01000001 	tsteq	r0, r1
  c8:	00370f48 	eorseq	r0, r7, r8, asr #30
  cc:	00f80000 	rscseq	r0, r8, r0
  d0:	00c02000 	sbceq	r2, r0, r0
  d4:	9c010000 	stcls	0, cr0, [r1], {-0}
  d8:	0000010a 	andeq	r0, r0, sl, lsl #2
  dc:	0001930c 	andeq	r9, r1, ip, lsl #6
  e0:	0f480100 	svceq	0x00480100
  e4:	0000010a 	andeq	r0, r0, sl, lsl #2
  e8:	05549102 	ldrbeq	r9, [r4, #-258]	; 0xfffffefe
  ec:	00000186 	andeq	r0, r0, r6, lsl #3
  f0:	ab134a01 	blge	4d28fc <startup-0x1fb2d704>
  f4:	02000000 	andeq	r0, r0, #0, 0
  f8:	8b055c91 	blhi	157344 <startup-0x1fea8cbc>
  fc:	01000001 	tsteq	r0, r1
 100:	0071144b 	rsbseq	r1, r1, fp, asr #8
 104:	91020000 	mrsls	r0, (UNDEF: 2)
 108:	040d006e 	streq	r0, [sp], #-110	; 0xffffff92
 10c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 110:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 114:	3d010000 	stccc	0, cr0, [r1, #-0]
 118:	00007110 	andeq	r7, r0, r0, lsl r1
 11c:	0000a400 	andeq	sl, r0, r0, lsl #8
 120:	00005420 	andeq	r5, r0, r0, lsr #8
 124:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
 128:	05000001 	streq	r0, [r0, #-1]
 12c:	00000193 	muleq	r0, r3, r1
 130:	71143f01 	tstvc	r4, r1, lsl #30
 134:	02000000 	andeq	r0, r0, #0, 0
 138:	b00f7691 	mullt	pc, r1, r6	; <UNPREDICTABLE>
 13c:	36200000 	strtcc	r0, [r0], -r0
 140:	06000000 	streq	r0, [r0], -r0
 144:	00776f72 	rsbseq	r6, r7, r2, ror pc
 148:	0a0d4001 	beq	350154 <startup-0x1fcafeac>
 14c:	02000001 	andeq	r0, r0, #1, 0
 150:	00007091 	muleq	r0, r1, r0
 154:	00010010 	andeq	r0, r1, r0, lsl r0
 158:	06240100 	strteq	r0, [r4], -r0, lsl #2
 15c:	20000048 	andcs	r0, r0, r8, asr #32
 160:	0000005c 	andeq	r0, r0, ip, asr r0
 164:	017a9c01 	cmneq	sl, r1, lsl #24
 168:	72080000 	andvc	r0, r8, #0, 0
 16c:	0100776f 	tsteq	r0, pc, ror #14
 170:	010a0624 	tsteq	sl, r4, lsr #12
 174:	91020000 	mrsls	r0, (UNDEF: 2)
 178:	9b110074 	blls	440350 <startup-0x1fbbfcb0>
 17c:	01000001 	tsteq	r0, r1
 180:	00100619 	andseq	r0, r0, r9, lsl r6
 184:	00382000 	eorseq	r2, r8, r0
 188:	9c010000 	stcls	0, cr0, [r1], {-0}
 18c:	00011811 	andeq	r1, r1, r1, lsl r8
 190:	06060100 	streq	r0, [r6], -r0, lsl #2
 194:	20000000 	andcs	r0, r0, r0
 198:	0000000c 	andeq	r0, r0, ip
 19c:	Address 0x000000000000019c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23, 0
  14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  24:	24030000 	strcs	r0, [r3], #-0
  28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  2c:	000e030b 	andeq	r0, lr, fp, lsl #6
  30:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
  34:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  38:	0b3b0b3a 	bleq	ec2d28 <startup-0x1f13d2d8>
  3c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  40:	06120111 			; <UNDEFINED> instruction: 0x06120111
  44:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  48:	00130119 	andseq	r0, r3, r9, lsl r1
  4c:	00340500 	eorseq	r0, r4, r0, lsl #10
  50:	0b3a0e03 	bleq	e83864 <startup-0x1f17c79c>
  54:	0b390b3b 	bleq	e42d48 <startup-0x1f1bd2b8>
  58:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  5c:	34060000 	strcc	r0, [r6], #-0
  60:	3a080300 	bcc	200c68 <startup-0x1fdff398>
  64:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  68:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  6c:	07000018 	smladeq	r0, r8, r0, r0
  70:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  74:	0b3a0e03 	bleq	e83888 <startup-0x1f17c778>
  78:	0b390b3b 	bleq	e42d6c <startup-0x1f1bd294>
  7c:	01111927 	tsteq	r1, r7, lsr #18
  80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  84:	01194297 			; <UNDEFINED> instruction: 0x01194297
  88:	08000013 	stmdaeq	r0, {r0, r1, r4}
  8c:	08030005 	stmdaeq	r3, {r0, r2}
  90:	0b3b0b3a 	bleq	ec2d80 <startup-0x1f13d280>
  94:	13490b39 	movtne	r0, #39737	; 0x9b39
  98:	00001802 	andeq	r1, r0, r2, lsl #16
  9c:	49010109 	stmdbmi	r1, {r0, r3, r8}
  a0:	00130113 	andseq	r0, r3, r3, lsl r1
  a4:	00210a00 	eoreq	r0, r1, r0, lsl #20
  a8:	0b2f1349 	bleq	bc4dd4 <startup-0x1f43b22c>
  ac:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  bc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  c0:	97184006 	ldrls	r4, [r8, -r6]
  c4:	13011942 	movwne	r1, #6466	; 0x1942
  c8:	050c0000 	streq	r0, [ip, #-0]
  cc:	3a0e0300 	bcc	380cd4 <startup-0x1fc7f32c>
  d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  d8:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
  dc:	0b0b0024 	bleq	2c0174 <startup-0x1fd3fe8c>
  e0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  e4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
  e8:	03193f01 	tsteq	r9, #1, 30
  ec:	3b0b3a0e 	blcc	2ce92c <startup-0x1fd316d4>
  f0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  f4:	11134919 	tstne	r3, r9, lsl r9
  f8:	40061201 	andmi	r1, r6, r1, lsl #4
  fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 100:	00001301 	andeq	r1, r0, r1, lsl #6
 104:	11010b0f 	tstne	r1, pc, lsl #22
 108:	00061201 	andeq	r1, r6, r1, lsl #4
 10c:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 110:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 114:	0b3b0b3a 	bleq	ec2e04 <startup-0x1f13d1fc>
 118:	01110b39 	tsteq	r1, r9, lsr fp
 11c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 120:	01194297 			; <UNDEFINED> instruction: 0x01194297
 124:	11000013 	tstne	r0, r3, lsl r0
 128:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 12c:	0b3a0e03 	bleq	e83940 <startup-0x1f17c6c0>
 130:	0b390b3b 	bleq	e42e24 <startup-0x1f1bd1dc>
 134:	01111927 	tsteq	r1, r7, lsr #18
 138:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 13c:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000218 	andeq	r0, r0, r8, lsl r2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000228 	andcs	r0, r0, r8, lsr #4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000019a 	muleq	r0, sl, r1
   4:	00650003 	rsbeq	r0, r5, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  20:	65642f73 	strbvs	r2, [r4, #-3955]!	; 0xfffff08d
  24:	73696e6e 	cmnvc	r9, #1760	; 0x6e0
  28:	69726863 	ldmdbvs	r2!, {r0, r1, r5, r6, fp, sp, lr}^
  2c:	6e657473 	mcrvs	4, 3, r7, cr5, cr3, {3}
  30:	2f6e6573 	svccs	0x006e6573
  34:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
  38:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  3c:	68632f73 	stmdavs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
  40:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
  44:	6d2f7372 	stcvs	3, cr7, [pc, #-456]!	; fffffe84 <wait+0xdffffc24>
  48:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
  4c:	6f72705f 	svcvs	0x0072705f
  50:	656b2f67 	strbvs	r2, [fp, #-3943]!	; 0xfffff099
  54:	655f6279 	ldrbvs	r6, [pc, #-633]	; fffffde3 <wait+0xdffffb83>
  58:	6e61686e 	cdpvs	8, 6, cr6, cr1, cr14, {3}
  5c:	00646563 	rsbeq	r6, r4, r3, ror #10
  60:	61747300 	cmnvs	r4, r0, lsl #6
  64:	70757472 	rsbsvc	r7, r5, r2, ror r4
  68:	0100632e 	tsteq	r0, lr, lsr #6
  6c:	05000000 	streq	r0, [r0, #-0]
  70:	02050001 	andeq	r0, r5, #1, 0
  74:	20000000 	andcs	r0, r0, r0
  78:	21211318 			; <UNDEFINED> instruction: 0x21211318
  7c:	200a032f 	andcs	r0, sl, pc, lsr #6
  80:	01000302 	tsteq	r0, r2, lsl #6
  84:	00010501 	andeq	r0, r1, r1, lsl #10
  88:	00100205 	andseq	r0, r0, r5, lsl #4
  8c:	19032000 	stmdbne	r3, {sp}
  90:	30050501 	andcc	r0, r5, r1, lsl #10
  94:	31201105 			; <UNDEFINED> instruction: 0x31201105
  98:	75010567 	strvc	r0, [r1, #-1383]	; 0xfffffa99
  9c:	cc0d05a2 	cfstr32gt	mvfx0, [sp], {162}	; 0xa2
  a0:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
  a4:	05222f0d 	streq	r2, [r2, #-3853]!	; 0xfffff0f3
  a8:	0d05201c 	stceq	0, cr2, [r5, #-112]	; 0xffffff90
  ac:	1c05222f 	sfmne	f2, 4, [r5], {47}	; 0x2f
  b0:	2f0d0520 	svccs	0x000d0520
  b4:	201c0522 	andscs	r0, ip, r2, lsr #10
  b8:	222f0d05 	eorcs	r0, pc, #320	; 0x140
  bc:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
  c0:	05222f0d 	streq	r2, [r2, #-3853]!	; 0xfffff0f3
  c4:	0d05201c 	stceq	0, cr2, [r5, #-112]	; 0xffffff90
  c8:	2201052f 	andcs	r0, r1, #197132288	; 0xbc00000
  cc:	3d140593 	cfldr32cc	mvfx0, [r4, #-588]	; 0xfffffdb4
  d0:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
  d4:	11052e05 	tstne	r5, r5, lsl #28
  d8:	03040200 	movweq	r0, #16896	; 0x4200
  dc:	00090521 	andeq	r0, r9, r1, lsr #10
  e0:	59030402 	stmdbpl	r3, {r1, sl}
  e4:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
  e8:	054b0304 	strbeq	r0, [fp, #-772]	; 0xfffffcfc
  ec:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
  f0:	23054a03 	movwcs	r4, #23043	; 0x5a03
  f4:	03040200 	movweq	r0, #16896	; 0x4200
  f8:	00050555 	andeq	r0, r5, r5, asr r5
  fc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 100:	05410c05 	strbeq	r0, [r1, #-3077]	; 0xfffff3fb
 104:	05772f01 	ldrbeq	r2, [r7, #-3841]!	; 0xfffff0ff
 108:	14054b13 	strne	r4, [r5], #-2835	; 0xfffff4ed
 10c:	4b130575 	blmi	4c16e8 <startup-0x1fb3e918>
 110:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 114:	11052110 	tstne	r5, r0, lsl r1
 118:	3c080531 	cfstr32cc	mvfx0, [r8], {49}	; 0x31
 11c:	05211005 	streq	r1, [r1, #-5]!
 120:	0d053016 	stceq	0, cr3, [r5, #-88]	; 0xffffffa8
 124:	2110054a 	tstcs	r0, sl, asr #10
 128:	05301605 	ldreq	r1, [r0, #-1541]!	; 0xfffff9fb
 12c:	10054a0d 	andne	r4, r5, sp, lsl #20
 130:	30160521 	andscc	r0, r6, r1, lsr #10
 134:	054a0d05 	strbeq	r0, [sl, #-3333]	; 0xfffff2fb
 138:	16052110 			; <UNDEFINED> instruction: 0x16052110
 13c:	4a0d0530 	bmi	341604 <startup-0x1fcbe9fc>
 140:	05211005 	streq	r1, [r1, #-5]!
 144:	0d053016 	stceq	0, cr3, [r5, #-88]	; 0xffffffa8
 148:	2110054a 	tstcs	r0, sl, asr #10
 14c:	05301605 	ldreq	r1, [r0, #-1541]!	; 0xfffff9fb
 150:	10054a0d 	andne	r4, r5, sp, lsl #20
 154:	30160521 	andscc	r0, r6, r1, lsr #10
 158:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
 15c:	16052110 			; <UNDEFINED> instruction: 0x16052110
 160:	3c0d0530 	cfstr32cc	mvfx0, [sp], {48}	; 0x30
 164:	05211005 	streq	r1, [r1, #-5]!
 168:	0d053016 	stceq	0, cr3, [r5, #-88]	; 0xffffffa8
 16c:	2110053c 	tstcs	r0, ip, lsr r5
 170:	85300105 	ldrhi	r0, [r0, #-261]!	; 0xfffffefb
 174:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
 178:	0505751d 	streq	r7, [r5, #-1309]	; 0xfffffae3
 17c:	201d052e 	andscs	r0, sp, lr, lsr #10
 180:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
 184:	05932101 	ldreq	r2, [r3, #257]	; 0x101
 188:	17053f05 	strne	r3, [r5, -r5, lsl #30]
 18c:	590d0531 	stmdbpl	sp, {r0, r4, r5, r8, sl}
 190:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
 194:	15054b0d 	strne	r4, [r5, #-2829]	; 0xfffff4f3
 198:	00010255 	andeq	r0, r1, r5, asr r2
 19c:	Address 0x000000000000019c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20393943 	eorscs	r3, r9, r3, asr #18
   8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
   c:	30322031 	eorscc	r2, r2, r1, lsr r0
  10:	30313931 	eorscc	r3, r1, r1, lsr r9
  14:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  18:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  1c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  24:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
  28:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
  2c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  30:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  34:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  38:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  3c:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
  40:	205d3939 	subscs	r3, sp, r9, lsr r9
  44:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  48:	20626d75 	rsbcs	r6, r2, r5, ror sp
  4c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  50:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  54:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  58:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  5c:	616d2d20 	cmnvs	sp, r0, lsr #26
  60:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  64:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  68:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  6c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  70:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  74:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  78:	00393963 	eorseq	r3, r9, r3, ror #18
  7c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
  80:	6f687300 	svcvs	0x00687300
  84:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  88:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  8c:	2064656e 	rsbcs	r6, r4, lr, ror #10
  90:	00746e69 	rsbseq	r6, r4, r9, ror #28
  94:	63676573 	cmnvs	r7, #482344960	; 0x1cc00000
  98:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
  9c:	73552f00 	cmpvc	r5, #0, 30
  a0:	2f737265 	svccs	0x00737265
  a4:	6e6e6564 	cdpvs	5, 6, cr6, cr14, cr4, {3}
  a8:	68637369 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
  ac:	74736972 	ldrbtvc	r6, [r3], #-2418	; 0xfffff68e
  b0:	65736e65 	ldrbvs	r6, [r3, #-3685]!	; 0xfffff19b
  b4:	6f442f6e 	svcvs	0x00442f6e
  b8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  bc:	2f73746e 	svccs	0x0073746e
  c0:	6c616863 	stclvs	8, cr6, [r1], #-396	; 0xfffffe74
  c4:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
  c8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
  cc:	705f632f 	subsvc	r6, pc, pc, lsr #6
  d0:	2f676f72 	svccs	0x00676f72
  d4:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
  d8:	686e655f 	stmdavs	lr!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
  dc:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
  e0:	74732f64 	ldrbtvc	r2, [r3], #-3940	; 0xfffff09c
  e4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  e8:	00632e70 	rsbeq	r2, r3, r0, ror lr
  ec:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
  f0:	00676573 	rsbeq	r6, r7, r3, ror r5
  f4:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
  f8:	6174735f 	cmnvs	r4, pc, asr r3
  fc:	00737574 	rsbseq	r7, r3, r4, ror r5
 100:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 104:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 108:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
 10c:	5f736900 	svcpl	0x00736900
 110:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
 114:	00636972 	rsbeq	r6, r3, r2, ror r9
 118:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 11c:	00707574 	rsbseq	r7, r0, r4, ror r5
 120:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 124:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 128:	61686320 	cmnvs	r8, r0, lsr #6
 12c:	656b0072 	strbvs	r0, [fp, #-114]!	; 0xffffff8e
 130:	615f6279 	cmpvs	pc, r9, ror r2	; <UNPREDICTABLE>
 134:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
 138:	006c7274 	rsbeq	r7, ip, r4, ror r2
 13c:	6e69616d 	powvsez	f6, f1, #5.0
 140:	73552f00 	cmpvc	r5, #0, 30
 144:	2f737265 	svccs	0x00737265
 148:	6e6e6564 	cdpvs	5, 6, cr6, cr14, cr4, {3}
 14c:	68637369 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 150:	74736972 	ldrbtvc	r6, [r3], #-2418	; 0xfffff68e
 154:	65736e65 	ldrbvs	r6, [r3, #-3685]!	; 0xfffff19b
 158:	6f442f6e 	svcvs	0x00442f6e
 15c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 160:	2f73746e 	svccs	0x0073746e
 164:	6c616863 	stclvs	8, cr6, [r1], #-396	; 0xfffffe74
 168:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 16c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 170:	705f632f 	subsvc	r6, pc, pc, lsr #6
 174:	2f676f72 	svccs	0x00676f72
 178:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 17c:	686e655f 	stmdavs	lr!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
 180:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
 184:	656b0064 	strbvs	r0, [fp, #-100]!	; 0xffffff9c
 188:	6e007379 	mcrvs	3, 0, r7, cr0, cr9, {3}
 18c:	72656d75 	rsbvc	r6, r5, #7488	; 0x1d40
 190:	625f6369 	subsvs	r6, pc, #-1543503871	; 0xa4000001
 194:	616d7469 	cmnvs	sp, r9, ror #8
 198:	61006b73 	tstvs	r0, r3, ror fp
 19c:	695f7070 	ldmdbvs	pc, {r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 1a0:	0074696e 	rsbseq	r6, r4, lr, ror #18

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000038 	andeq	r0, r0, r8, lsr r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000048 	andcs	r0, r0, r8, asr #32
  48:	0000005c 	andeq	r0, r0, ip, asr r0
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	200000a4 	andcs	r0, r0, r4, lsr #1
  68:	00000054 	andeq	r0, r0, r4, asr r0
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000f8 	strdcs	r0, [r0], -r8
  88:	000000c0 	andeq	r0, r0, r0, asr #1
  8c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  90:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  94:	300e4101 	andcc	r4, lr, r1, lsl #2
  98:	00070d41 	andeq	r0, r7, r1, asr #26
  9c:	00000020 	andeq	r0, r0, r0, lsr #32
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  b0:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  b4:	41018e02 	tstmi	r1, r2, lsl #28
  b8:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
  bc:	00000007 	andeq	r0, r0, r7
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  cc:	00000038 	andeq	r0, r0, r8, lsr r0
  d0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  d4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  d8:	180e4101 	stmdane	lr, {r0, r8, lr}
  dc:	00070d41 	andeq	r0, r7, r1, asr #26
